using Microsoft.AspNetCore.Mvc;
using Therapim.Models;
using Therapim.Processers;
using Therapim.Services;

namespace Therapim.Controllers
{
    /// <summary>
    /// 予約用コントローラークラス
    /// </summary>
    public class ReservationController : Controller
    {
        private readonly ILogger<ReviewController> _logger;
        private readonly ICommonService _commonService;

        //DIコンテナより取得した機能のインスタンスを初期化しておく
        public ReservationController(
            ILogger<ReviewController> logger,
            ICommonService commonService)
        {
            _logger = logger;
            _commonService = commonService;
        }


        /// <summary>
        /// 予約登録画面
        /// </summary>
        /// <returns>予約登録画面</returns>        
        [HttpGet]
        public async Task<IActionResult> Create(string? MenuId)
        {
            // 新規作成の場合は空のモデルを返すので作成
            var reservation = new ReservationRequestModel();

            // ログイン中の場合は個人情報を格納しておく
            reservation.FullName = _commonService.GetCookieFullName();
            reservation.Birthday = _commonService.GetCookieBirthday();
            reservation.PhoneNumber = _commonService.GetCookiePhoneNumber();

            // コース情報取得処理
            var CourseProcesser = new CourseProccesser(_logger, _commonService);
            var CourseList = await CourseProcesser.getCourseList();

            if (CourseList == null)
            {
                // TempData にエラーメッセージを設定
                TempData["ErrorMessage"] = "コース情報取得の通信に失敗しました。再度お試しいただいても解決しない場合は店舗までお問い合わせください。";
                // エラー画面にリダイレクト
                return RedirectToAction("Error", "Home");
            }

            ViewData["CourseList"] = CourseList;

            // コース画面から来た場合はパラメータのメニューID取得して渡す
            ViewData["MenuId"] = MenuId?.ToString() ?? string.Empty;

            return View("Create", reservation);
        }


        /// <summary>
        /// 予約登録画面(POSTBACK時)
        /// </summary>
        /// <returns>予約登録画面(POSTBACK時)</returns>        
        [HttpPost]
        public async Task<IActionResult> Create(ReservationRequestModel model)
        {
            // 選択サロンの値だけ変換が必要
            //string[] salonList = model.DesiredSalon.Split(",");


            // コース情報取得処理
            var CourseProcesser = new CourseProccesser(_logger, _commonService);
            var CourseList = await CourseProcesser.getCourseList();

            if (CourseList == null)
            {
                // TempData にエラーメッセージを設定
                TempData["ErrorMessage"] = "戻る際にコース情報取得の通信に失敗しました。再度お試しいただいても解決しない場合は店舗までお問い合わせください。";
                // エラー画面にリダイレクト
                return RedirectToAction("Error", "Home");
            }

            ViewData["CourseList"] = CourseList;

            return View("Create", model);
        }


        /// <summary>
        /// 予約登録確認画面
        /// </summary>
        /// <returns>予約登録確認画面</returns>        
        [HttpPost]
        public async Task<IActionResult> CreateConfirm(ReservationRequestModel model)
        {
            //userIdは画面になく、nullになっているためセッションのuserIdで上書き(必須ではないのでnullでもよい)
            model.UserId = _commonService.GetSessionUserId();

            // 再度バリデーションを実行してModelStateを更新する
            TryValidateModel(model);
            // バリデーションエラーがある場合は入力画面を再表示
            if (!ModelState.IsValid)
            {
                // コース情報取得処理
                var CourseProcesser = new CourseProccesser(_logger, _commonService);
                var CourseList = await CourseProcesser.getCourseList();

                if (CourseList == null)
                {
                    // TempData にエラーメッセージを設定
                    TempData["ErrorMessage"] = "コース情報取得の通信に失敗しました。再度お試しいただいても解決しない場合は店舗までお問い合わせください。";
                    // エラー画面にリダイレクト
                    return RedirectToAction("Error", "Home");
                }

                ViewData["CourseList"] = CourseList;
                return View("Create", model);
            }

            // 問題なければ確認画面へ遷移
            return View("CreateConfirm", model);
        }


        /// <summary>
        /// 予約登録処理
        /// </summary>
        /// <returns>予約登録処理後の遷移画面</returns>
        [HttpPost]
        public async Task<IActionResult> XtCreate(ReservationRequestModel model)
        {
            //userIdは画面になく、nullになっているためセッションのuserIdで上書き(必須ではないのでnullでもよい)
            model.UserId = _commonService.GetSessionUserId();

            // 再度バリデーションを実行してModelStateを更新する
            TryValidateModel(model);
            // バリデーションエラーがある場合は確認画面を再表示
            if (!ModelState.IsValid)
            {
                return View("CreateConfirm", model);
            }

            // 登録処理
            var reservationProcesser = new ReservationProcesser(_logger, _commonService);
            var createReservationResult = await reservationProcesser.createOneReservation(model);

            if (createReservationResult == null)
            {
                // TempData にエラーメッセージを設定
                TempData["ErrorMessage"] = "予約申込の通信に失敗しました。再度お試しいただいても解決しない場合は店舗までお問い合わせください。";
                // エラー画面にリダイレクト
                return RedirectToAction("Error", "Home");
            }

            // 成功時は一覧画面へリダイレクト
            return RedirectToAction("List");
        }

    }
}
